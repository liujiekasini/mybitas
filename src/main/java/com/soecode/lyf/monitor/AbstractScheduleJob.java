package com.soecode.lyf.monitor;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.scheduling.annotation.Scheduled;import com.soecode.lyf.dao.ScheduleExecuteResultDao;import com.soecode.lyf.dto.ScheduleExecuteResult;import com.soecode.lyf.enums.ScheduleExecuteStatus;/** * 定时任务* @author  created by liujie* @date    2017年3月10日 --- @上午11:12:13* */public abstract class AbstractScheduleJob implements Job {	private Logger logger = LoggerFactory.getLogger(this.getClass());    private static ScheduleExecuteResultDao scheduleExecuteResultDao = SpringHelper.popBean(ScheduleExecuteResultDao.class);        public void execute(JobExecutionContext context) throws JobExecutionException {        String scheduleId = groupId() + "_" + scheduleId();        logger.info("定时任务[{}]开始执行", scheduleId);        ScheduleExecuteResult scheduleExecuteResult = new ScheduleExecuteResult(scheduleId,ScheduleExecuteStatus.RUNNING.getCode());        scheduleExecuteResultDao.save(scheduleExecuteResult);        try {            schedule(context);            scheduleExecuteResult.setStatus(ScheduleExecuteStatus.FINISHED.getCode());        } catch (Throwable t) {            scheduleExecuteResult.setStatus(ScheduleExecuteStatus.EXCEPTION.getCode());            logger.error("定时任务[" + scheduleId + "]执行出现异常", t);        }        scheduleExecuteResultDao.update(scheduleExecuteResult);        logger.info("定时任务[{}]执行结束", scheduleId);    }    public abstract void schedule(JobExecutionContext context) throws JobExecutionException;    public abstract String scheduleId();    public abstract String groupId();}